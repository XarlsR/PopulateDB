package dev.xarlsr.popdb.fields;

import dev.xarlsr.popdb.generators.ValuesGenerator;
import dev.xarlsr.popdb.userint.GetData;

public class ProbStringField implements Field {


    /**
     * <b>Sets file type constant.</b>
     */
    private static final String FTYPE = "PSTRING";

    /**
     * <b>Sets the number of lines to be read from text file. </b><br>
     * RVC stands for read value count.
     * The number of lines of the file to be read must be equal or greater than RVC.
     */
    private static final int RVC = 100;

    /**
     * <b>Sets a text file is needed.</b>
     */
    private static final boolean FILE_NEEDED = true;

    /**
     * <b>Name of the field.</b>
     */
    String fName;

    /**
     * <b>Full path and name of the text file</b>
     */
    String pathName;


    /**
     * <b>Sets the name of the field.</b>
     * @param fName {@code String} with the name of the field.
     * @see Field#setName(String)
     */
    @Override
    public void setName(String fName) {
        this.fName = fName;
    }

    /**
     * <b>Sets the name and path of the source text file to extract the data from.</b><br>
     * @param pathName {@code String} with the name and path of the source text file.
     */
    @Override
    public void setPathName(String pathName) {
        this.pathName = pathName;
    }

    /**
     * <b>Gets from the user the parameters needed to generate the value of the field.</b><br>
     * {@code setName()} and {@code setPathName()} are called to get the two
     * needed parameters.<br>
     * @see #setName(String)
     * @see #setPathName(String)
     * @see Field#setGenerateParameters()
     */
    @Override
    public void setGenerateParameters() {
        setName(GetData.readFieldName());
        setPathName(GetData.readPathName());

    }

    /**
     * <b>Returns the name of the field</b>
     * @return {@code String} with the name of the field
     */
    @Override
    public String getName() {
        return fName;
    }

    /**
     * <b>Returns the type of the field</b>
     * @return {@code String} with the type of the field
     */
    @Override
    public String getType() {
        return FTYPE;
    }

    /**
     * <b>Returns the full path oft the source file</b>
     * @return {@code String} with the path of the text file.
     * @see Field#getPathName()
     */
    @Override
    public String getPathName() {
        return pathName;
    }

    /**
     * <b>Generates and returns the value of the field in {@code String} form</b> <br>
     * The value is generated by calling the {@code getProbStringFromFile(String)} method
     * from {@code ValuesGenerator} class.
     * @return {@String} with the value of the field.
     * @see ValuesGenerator#getProbStringFromFile(String)
     * @see Field#getValue()
     */
    @Override
    public String getValue() {
        return ValuesGenerator.getProbStringFromFile(pathName);
    }

    /**
     * <b>Returns whether or not the field needs a text file to be generated.</b>
     * @return True or false
     */
    @Override
    public Boolean needsFile() {
        return FILE_NEEDED;
    }
}
